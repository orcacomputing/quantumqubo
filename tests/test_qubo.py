import unittest

import numpy as np
import torch


class QuantumQuboTests(unittest.TestCase):

    def test_qubo_success(self):
        """Tests that QUBO can find the correct solution in a simple case"""

        print("Testing that the QUBO algorithm can find the solution to a simple test instance...")

        from quantumqubo.qubo import QUBO

        # Parameters for a "circle" graph, where the minimum is achieved for state (1,1,1,1,1,1)
        M = 6
        Q = np.array([[0,-1,0,0,0,-1],[-1,0,0,0,-1,0],[0,0,0,-1,0,-1],[0,0,-1,0,-1,0],[0,-1,0,-1,0,0],[-1,0,-1,0,0,0]])
        
        def qubo_function(vect):
            return np.dot(vect, np.dot(Q, vect))

        qubo = QUBO(
            M,
            qubo_function
        )
        qubo.train(
            learning_rate=1e-1,
            updates=20,
            samples_per_point=50,
            print_frequency=5,
            verbose=False
        )

        # Check that the solution is indeed in the final bit strings generated by the device
        self.assertTrue((1,1,1,1,1,1) in qubo.res.keys())

if __name__ == '__main__':
    unittest.main()
